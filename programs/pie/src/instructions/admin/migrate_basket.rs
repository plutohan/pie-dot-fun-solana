use std::io::Cursor;

use anchor_lang::prelude::{
    borsh::{BorshDeserialize, BorshSerialize},
    *,
};

use crate::{
    constant::PROGRAM_STATE,
    error::PieError,
    states::{BasketComponent, BasketState, RebalanceType},
    BasketConfig, ProgramState,
};

#[derive(Accounts)]
pub struct MigrateBasketContext<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,

    #[account(
        mut,
        seeds = [PROGRAM_STATE],
        bump = program_state.bump,
        constraint = program_state.admin == admin.key() @ PieError::Unauthorized
    )]
    pub program_state: Account<'info, ProgramState>,

    /// CHECK: we are manually deserializing it
    #[account(mut)]
    pub basket_config: AccountInfo<'info>,

    pub system_program: Program<'info, System>,
}

pub fn migrate_basket(ctx: Context<MigrateBasketContext>) -> Result<()> {
    let raw_data = &mut ctx.accounts.basket_config.data.borrow_mut();

    // skip 8 byte discriminator
    let mut cursor = Cursor::new(&raw_data[8..]);

    let old = BasketConfigV1::deserialize_reader(&mut cursor).unwrap();

    // @TODO: Set the correct number for Production
    require!(old.id < 27, PieError::InvalidBasketId);

    let mut upgraded = BasketConfig {
        bump: old.bump,
        id: old.id,
        creator: old.creator,
        rebalancer: old.rebalancer,
        mint: old.mint,
        state: BasketState::Default,
        rebalance_type: RebalanceType::Dynamic,
        components: old.components,
        creator_fee_bp: 50,
        version: 2,
        reserved: [0; 10],
    };

    upgraded.serialize(&mut &mut raw_data[8..])?;

    Ok(())
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BasketConfigV1 {
    pub bump: u8,
    pub id: u64,
    pub creator: Pubkey,
    pub rebalancer: Pubkey,
    pub mint: Pubkey,
    pub is_rebalancing: bool,
    pub components: Vec<BasketComponent>,
}

#[cfg(test)]
mod tests {
    use super::*;
    use borsh::{BorshDeserialize, BorshSerialize};
    use std::io::Cursor;

    #[test]
    fn test_migrate_basket_manual() {
        // actual raw data
        let mut raw_data: Vec<u8> = vec![
            0x7b, 0xe1, 0xf6, 0x92, 0x43, 0xa5, 0xfd, 0xca, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xe9, 0x25, 0x8f, 0x8d, 0xc4, 0x8b, 0x78, 0x8d, 0x90, 0x6a, 0x12,
            0x2a, 0xc2, 0x1d, 0xdd, 0x23, 0xf9, 0xbc, 0x60, 0x59, 0x96, 0x3c, 0x96, 0x8a, 0xfe,
            0xb0, 0xfc, 0xd1, 0xee, 0x74, 0x05, 0xda, 0xe9, 0x25, 0x8f, 0x8d, 0xc4, 0x8b, 0x78,
            0x8d, 0x90, 0x6a, 0x12, 0x2a, 0xc2, 0x1d, 0xdd, 0x23, 0xf9, 0xbc, 0x60, 0x59, 0x96,
            0x3c, 0x96, 0x8a, 0xfe, 0xb0, 0xfc, 0xd1, 0xee, 0x74, 0x05, 0xda, 0x84, 0x8a, 0xb0,
            0x53, 0x89, 0x67, 0x57, 0xc5, 0x49, 0xab, 0x35, 0x86, 0xa2, 0xdd, 0xc4, 0xe4, 0x9e,
            0xe8, 0x9e, 0x31, 0x47, 0x10, 0x6d, 0x6c, 0x7e, 0xf0, 0x67, 0xbf, 0xe9, 0xf0, 0xef,
            0xca, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0xb3, 0x7e, 0x56, 0x63, 0xeb, 0xe9, 0x15,
            0xd8, 0x10, 0xb2, 0x0f, 0x0a, 0x0e, 0x3e, 0x0d, 0x2d, 0x46, 0x1d, 0x1e, 0xfa, 0xb2,
            0xd6, 0x00, 0xf6, 0xa3, 0x6b, 0x14, 0x1e, 0x1d, 0xc4, 0x3d, 0x66, 0xfd, 0x04, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x08,
            0x5a, 0x1b, 0xb5, 0x37, 0x67, 0x52, 0x00, 0xb8, 0x56, 0xba, 0xa5, 0x6a, 0x97, 0xf0,
            0x2a, 0x4f, 0x48, 0x48, 0x4f, 0x1d, 0x57, 0x69, 0xf6, 0xdf, 0x44, 0xa0, 0xb1, 0xbf,
            0xd6, 0x84, 0x39, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xbc, 0x07, 0xc5, 0x6e, 0x60, 0xad, 0x3d, 0x3f, 0x17, 0x73,
            0x82, 0xea, 0xc6, 0x54, 0x8f, 0xba, 0x1f, 0xd3, 0x2c, 0xfd, 0x90, 0xca, 0x02, 0xb3,
            0xe7, 0xcf, 0xa1, 0x85, 0xfd, 0xce, 0x73, 0x98, 0xa4, 0x74, 0x3d, 0x09, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0xf9, 0xfb, 0x32,
            0xf4, 0x91, 0x11, 0xab, 0x20, 0xc3, 0x3f, 0x25, 0x98, 0xfc, 0x83, 0x6c, 0x11, 0x3e,
            0x29, 0x18, 0x81, 0xac, 0x21, 0xee, 0x29, 0x16, 0x93, 0x94, 0x01, 0x12, 0x44, 0xe4,
            0x0b, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x06, 0x9b, 0x88, 0x57, 0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68, 0x7f, 0x63,
            0x46, 0x18, 0xc0, 0x35, 0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55, 0x98, 0xa0,
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x57, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xfc, 0xf8, 0x96, 0x8b, 0x8d,
            0xab, 0x88, 0x48, 0x1e, 0x2d, 0x2a, 0xe6, 0x89, 0xc9, 0x52, 0xc7, 0x57, 0xae, 0xba,
            0x64, 0x3e, 0x39, 0x19, 0xe8, 0x9f, 0x2e, 0x55, 0x79, 0x5c, 0x76, 0xc1, 0xdb, 0xb2,
            0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x9b, 0x88, 0x57, 0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68, 0x7f, 0x63, 0x46, 0x18,
            0xc0, 0x35, 0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55, 0x98, 0xa0, 0xf0, 0x00,
            0x00, 0x00, 0x00, 0x01, 0xbb, 0x30, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x9b, 0x88, 0x57, 0xfe, 0xab, 0x81, 0x84,
            0xfb, 0x68, 0x7f, 0x63, 0x46, 0x18, 0xc0, 0x35, 0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb,
            0x3b, 0x55, 0x98, 0xa0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xee, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x9b,
            0x88, 0x57, 0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68, 0x7f, 0x63, 0x46, 0x18, 0xc0, 0x35,
            0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55, 0x98, 0xa0, 0xf0, 0x00, 0x00, 0x00,
            0x00, 0x01, 0xc6, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x9b, 0x88, 0x57, 0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68,
            0x7f, 0x63, 0x46, 0x18, 0xc0, 0x35, 0xda, 0xc4, 0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55,
            0x98, 0xa0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8a, 0x16, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x9b, 0x88, 0x57,
            0xfe, 0xab, 0x81, 0x84, 0xfb, 0x68, 0x7f, 0x63, 0x46, 0x18, 0xc0, 0x35, 0xda, 0xc4,
            0x39, 0xdc, 0x1a, 0xeb, 0x3b, 0x55, 0x98, 0xa0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x53, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        // skip 8 byte discriminator
        let mut cursor = Cursor::new(&raw_data[8..]);

        let old = BasketConfigV1::deserialize_reader(&mut cursor).unwrap();

        let mut upgraded = BasketConfig {
            bump: old.bump,
            id: old.id,
            creator: old.creator,
            rebalancer: old.rebalancer,
            mint: old.mint,
            state: BasketState::Default,
            rebalance_type: RebalanceType::Dynamic,
            components: old.components,
            creator_fee_bp: 50,
            version: 2,
            reserved: [0; 10],
        };

        upgraded.serialize(&mut &mut raw_data[8..]).unwrap();

        let new = BasketConfig::deserialize(&mut &raw_data[8..]).unwrap();

        assert_eq!(new.id, 3);
        assert_eq!(new.creator, old.creator);
        assert_eq!(new.rebalancer, old.rebalancer);
        assert_eq!(new.mint, old.mint);
        assert_eq!(new.state, BasketState::Default);
        assert_eq!(new.version, 2);
        assert_eq!(new.creator_fee_bp, 50);
    }
}
